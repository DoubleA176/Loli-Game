<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_WackyWallace</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.5;
hsp = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 4;
inv_frm = 0;
global.max_health = 100;
global.current_health = global.max_health;
global.dir = 1;
global.proj_num = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);

if(-1 * key_left){
    global.dir = -1;
}
if(key_right){
    global.dir = 1;
}

//React to inputs
move = key_left + key_right;
hsp = move * movespeed;
if(vsp &lt; 10){
vsp += grav;
}

if(place_meeting(x,y+1,o_platform)){
    vsp = key_jump * -jumpspeed;
}

//Horizontal collision
if(place_meeting(x+hsp,y,o_platform)){
    while(!place_meeting(x + sign(hsp),y,o_platform)){
        x+=sign(hsp);
    }
    hsp = 0;
}

x += hsp;


//Vertical collision
if(place_meeting(x,y+vsp,o_platform)){
    while(!place_meeting(x,y + sign(vsp),o_platform)){
        y+=sign(vsp);
    }
    vsp = 0;
}

y += vsp;

if(place_meeting(x,y,obj_win)){
    room_goto_next();
}

if(place_meeting(x,y,obj_death)){
    global.current_health = 0;
}
if(inv_frm == 0){
    if(place_meeting(x + 1,y,obj_enemy_1)){
        inv_frm = 120;
        global.current_health -= 10;
    }
    if(place_meeting(x - 1,y,obj_enemy_1)){
        inv_frm = 120;
        global.current_health -= 10;
    }
    if(place_meeting(x + 1,y,obj_enemy_2)){
        inv_frm = 120;
        global.current_health -= 10;
    }
    if(place_meeting(x - 1,y,obj_enemy_2)){
       inv_frm = 120;
       global.current_health -= 10;
    }
}
else if(inv_frm &gt; 0){
inv_frm--;
}
else{
inv_frm++
}

if(global.current_health &lt;= 0){
    room_restart();
}





//Middle click on code to find what is does
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.proj_num &lt; 3){
    if(global.dir == 1){
        instance_create(x + 32, y + 16, o_projectile);
    }
    else{
        instance_create(x - 16, y + 16, o_projectile);
    }
    global.proj_num++;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
